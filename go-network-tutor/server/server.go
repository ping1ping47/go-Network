// แพคเกจหลักของโปรแกรมตั้งชื่อว่า main
package main

// นำเข้าแพคเกจที่ต้องการใช้งาน
import (
	"fmt" // แพคเกจ fmt ใช้สำหรับพิมพ์ข้อความออกทางหน้าจอ
	"net" // แพคเกจ net ใช้สำหรับเชื่อมต่อเครือข่าย
)

	// ฟังก์ชันที่จัดการการเชื่อมต่อเครือข่าย
	// รับพารามิเตอร์เป็นตัวแปร conn และเป็นชนิด net.Conn
	// ซึ่งเป็นการเชื่อมต่อเครือข่าย
func handleConnection(conn net.Conn) {
	defer conn.Close() // ปิดการเชื่อมต่อเครือข่ายเมื่อฟังก์ชัน handleConnection จบการทำงาน
	
	// 1. สร้างตัวแปร buffer เพื่อเก็บข้อมูลที่รับเข้ามา
	buffer := make([]byte, 1024) // สร้าง buffer ขนาด 1024 bytes

	// 2. รอรับข้อมูลที่ส่งเข้ามาจากเครือข่าย
	// โดยใช้ฟังก์ชัน conn.Read และส่งตัวแปร buffer เข้าไป
	// ซึ่งจะทำการอ่านข้อมูลที่ส่งเข้ามาจากเครือข่าย
	// และจะส่งจำนวน bytes ที่อ่านได้กลับมาให้กับตัวแปร n
	for {
		n, err := conn.Read(buffer) // รับข้อมูลที่ส่งเข้ามาจากเครือข่าย

		// 3. ตรวจสอบว่ามีข้อผิดพลาดหรือไม่
		if err != nil {
			// ถ้ามีข้อผิดพลาดให้แสดงออกทางหน้าจอ
			fmt.Println(err)
			return // จบการทำงาน
		}

		// 4. แสดงข้อความออกทางหน้าจอ
		fmt.Println("Client:", string(buffer[:n]))

		// 5. ส่งข้อมูลกลับไปยังเครือข่าย
		// โดยใช้ฟังก์ชัน conn.Write และส่งตัวแปร buffer เข้าไป
		// ซึ่งจะทำการส่งข้อมูลกลับไปยังเครือข่าย
		conn.Write(buffer[:n])

	}
}

// ฟังก์ชัน main ฟังก์ชันหลักของโปรแกรม
func main() {
	// 1.สร้างตัวแปร listener เพื่อรอรับการเชื่อมต่อเครือข่าย
	// โดยใช้ฟังก์ชัน net.Listen และกำหนดพอร์ตที่ต้องการให้เปิดใช้งาน
	// ในที่นี้ใช้พอร์ต 5000
	listener, err := net.Listen("tcp", ":5000") 

	// 2.ตรวจสอบว่ามีข้อผิดพลาดหรือไม่ ! =
	if err != nil {
		// ถ้ามีข้อผิดพลาดให้แสดงออกทางหน้าจอ
		fmt.Println(err)
		return // จบการทำงาน
	}	

	defer listener.Close() // ปิดการเชื่อมต่อเครือข่ายเมื่อฟังก์ชัน main จบการทำงาน

	// 3.แสดงข้อความออกทางหน้าจอ
	fmt.Println("Server is listening...")

	// 4. รอรับการเชื่อมต่อเครือข่าย
	for {
		// 4.1 รอรับการเชื่อมต่อเครือข่าย
		conn, err := listener.Accept()

		// 4.2 ตรวจสอบว่ามีข้อผิดพลาดหรือไม่
		if err != nil {
			// ถ้ามีข้อผิดพลาดให้แสดงออกทางหน้าจอ
			fmt.Println(err)
			return // จบการทำงาน
		}

		// 4.3 แสดงข้อความออกทางหน้าจอ
		fmt.Println("Client connected")

		// ส่งตัวแปร conn ไปยังฟังก์ชัน handleConnection
		// ซึ่งจะทำการจัดการการเชื่อมต่อเครือข่าย
		go handleConnection(conn)	// go คือการเรียกใช้งานฟังก์ชันแบบ asynchronous
	}

	
}